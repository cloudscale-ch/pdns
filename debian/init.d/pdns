#!/bin/sh
### BEGIN INIT INFO
# Provides:          pdns
# Required-Start:    $network $remote_fs $syslog
# Required-Stop:     $network $remote_fs $syslog
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Should-Start:      slapd
# Should-Stop:       slapd
# Short-Description: PDNS is a versatile high performance authoritative nameser
### END INIT INFO

PATH=/bin:/sbin:/usr/bin:/usr/sbin
BINARYPATH=/usr/bin
SBINARYPATH=/usr/sbin
SOCKETPATH=/var/run

ODESC="PowerDNS Authoritative Name Server"
DESC="$ODESC"
NAME=pdns
DAEMON=/usr/sbin/pdns_server
DAEMON_ARGS=""
PIDFILE=/var/run/$NAME.pid
SCRIPTNAME=/etc/init.d/$NAME

[ -x "$DAEMON" ] || exit 0

[ -r /etc/default/pdns ] && . /etc/default/pdns

# Make sure that /var/run exists
mkdir -p $SOCKETPATH
cd $SOCKETPATH

# Handle instance scripts
suffix=$(basename $0 | cut -d- -f2- -s)

if [ $suffix ]; then
	SUFFIX="--config-name=$suffix"
	DAEMON_ARGS="$DAEMON_ARGS $SUFFIX"
	NAME="$NAME-$suffix"
	DESC="$DESC (config name $suffix)"
	PIDFILE="/var/run/$NAME-$suffix.pid"
fi

# Load the VERBOSE setting and other rcS variables
. /lib/init/vars.sh

# Define LSB log_* functions.
# Depend on lsb-base (>= 3.2-14) to ensure that this file is present
# and status_of_proc is working.
. /lib/lsb/init-functions

# function to invoke properly parametrized pdns_control
doPC()
{
	return $($BINARYPATH/pdns_control $SUFFIX $1 $2 2> /dev/null)
}

isrunning()
{
	return doPC ping
}

#
# Function that starts the daemon/service
#
do_start()
{
        # Return
        #   0 if daemon has been started
        #   1 if daemon was already running
        #   2 if daemon could not be started
	isrunning || return 1
        start-stop-daemon --start --quiet \
		--pidfile $PIDFILE --exec $DAEMON -- \
                $DAEMON_ARGS --daemon --guardian=yes \
                || return 2
}

#
# Function that stops the daemon/service
#
do_stop()
{
        # Return
        #   0 if daemon has been stopped
        #   1 if daemon was already stopped
        #   2 if daemon could not be stopped
        #   other if a failure occurred
        doPC quit
	RETVAL="2"
	for sec in $(seq 1 5); do
		if !isrunning; then
			RETVAL="0"
			break
		fi
	done
        [ "$RETVAL" = 2 ] && return 2
        rm -f $PIDFILE
}

case "$1" in
  start)
	[ "$VERBOSE" != no ] && log_daemon_msg "Starting $DESC" "$NAME"
	do_start
	case "$?" in
		0|1) [ "$VERBOSE" != no ] && log_end_msg 0 ;;
		2) [ "$VERBOSE" != no ] && log_end_msg 1 ;;
	esac
	;;
  stop)
	[ "$VERBOSE" != no ] && log_daemon_msg "Stopping $DESC" "$NAME"
	do_stop
	case "$?" in
		0|1) [ "$VERBOSE" != no ] && log_end_msg 0 ;;
		2) [ "$VERBOSE" != no ] && log_end_msg 1 ;;
	esac
	;;
  status)
        if isrunning; then
		log_success_msg "$NAME is running: $(doPC status)"
	else
		log_failure_msg "$NAME is not running"
		exit 1
	fi 
	;;	
  force-stop)
	[ "$VERBOSE" != no ] && log_daemon_msg "Killing $ODESC (all instances)" "$NAME"
	case kill -9 $(pidof pdns_server) in
		0) [ "$VERBOSE" != no ] && log_end_msg 0 ;;
		1) [ "$VERBOSE" != no ] && log_end_msg 1 ;;
	esac
	;;
  restart)
        log_daemon_msg "Restarting $DESC" "$NAME"
	do_stop
        case "$?" in
          0|1)
                do_start
                case "$?" in
                        0) log_end_msg 0 ;;
                        1) log_end_msg 1 ;; # Old process is still running
                        *) log_end_msg 1 ;; # Failed to start
                esac
                ;;
          *)
                # Failed to stop
                log_end_msg 1
                ;;
        esac
        ;;
  reload) 
	log_daemon_msg "Reloading $DESC" "$NAME"
	if isrunning; then
	  case doPC cycle in
		0) [ "$VERBOSE" != no ] && log_end_msg 0 ;;
		1) [ "$VERBOSE" != no ] && log_end_msg 1 ;;
	  esac
	else
	  log_end_msg 0;;
	fi
	;;		
  monitor)
	if isrunning; then
		echo "already running"
	else
		pdns_server $DAEMON_ARGS --daemon=no --guardian=no --control-console --loglevel=9
	fi 
	;;		
  dump)
	if isrunning; then
		echo $(doPC list)
	else
		echo "not running"
	fi 
	;;		
  show)
	if [ $# -lt 2 ]; then
			echo "Insufficient parameters"
			exit 1
	fi 
	if isrunning; then
		echo -n "$2="
		doPC show $2 ; echo $ret
	else
		echo "not running"
	fi 
	;;		
  mrtg)
	if [ $# -lt 2 ]; then
			echo "Insufficient parameters"
			exit 1
	fi 
	if isrunning; then
		echo $(doPC show $2)
		if [ "$3x" != "x" ]; then
			echo $(doPC show $3)
		else
			echo 0
		fi
		echo $(doPC uptime)
		echo "$DESC"
	else
		echo "not running"
	fi 
	;;		
  cricket)
	if [ $# -lt 2 ]; then
			echo "Insufficient parameters"
			exit 1
	fi 
	if isrunning; then
		echo $(doPC show $2)
	else
		echo "not running"
	fi 
	;;		
  *)
	echo "Usage: $SCRIPTNAME {start|stop|status|force-stop|restart|reload|monitor|dump|show|mrtg|cricket}"
	;;
esac

exit 0
