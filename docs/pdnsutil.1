.TH "PDNSUTIL" "1" "November 2011" "PowerDNS DNSSEC command and control" ""
.SH NAME
.PP
pdnsutil \- PowerDNS dnssec command and control
.SH SYNOPSIS
.PP
pdnsutil [OPTION]...
\f[I]COMMAND\f[]
.SH DESCRIPTION
.PP
\f[B]pdnsutil\f[] (formerly pdnssec) is a powerful command that is the
operator\-friendly gateway into DNSSEC and zone management for PowerDNS.
Behind the scenes, \f[B]pdnsutil\f[] manipulates a PowerDNS backend
database, which also means that for many databases, \f[B]pdnsutil\f[]
can be run remotely, and can configure key material on different
servers.
.SH OPTIONS
.TP
.B \-h | \-help
Show summary of options
.RS
.RE
.TP
.B \-v | \-\-verbose
Be more verbose.
.RS
.RE
.TP
.B \-\-force
force an action
.RS
.RE
.TP
.B \-\-config\-name \f[I]NAME\f[]
Virtual configuration name
.RS
.RE
.TP
.B \-\-config\-dir \f[I]DIR\f[]
Location of pdns.conf.
Default is /etc/powerdns.
.RS
.RE
.SH COMMANDS
.PP
There are many available commands, this section splits them up into
their respective uses
.SS DNSSEC RELATED COMMANDS
.PP
Several commands manipulate the DNSSEC keys and options for zones.
Some of these commands require an \f[I]ALGORITHM\f[] to be set.
The following algorithms are supported:
.IP \[bu] 2
rsasha1
.IP \[bu] 2
rsasha256
.IP \[bu] 2
rsasha512
.IP \[bu] 2
gost
.IP \[bu] 2
ecdsa256
.IP \[bu] 2
ecdsa384
.TP
.B activate\-zone\-key \f[I]ZONE\f[] \f[I]KEY\-ID\f[]
Activate a key with id \f[I]KEY\-ID\f[] within a zone called
\f[I]ZONE\f[].
.RS
.RE
.TP
.B add\-zone\-key \f[I]ZONE\f[] {\f[B]KSK\f[],\f[B]ZSK\f[]} [\f[B]active\f[],\f[B]inactive\f[]] \f[I]KEYBITS\f[] \f[I]ALGORITHM\f[]
Create a new key for zone \f[I]ZONE\f[], and make it a KSK or a ZSK,
with the specified algorithm.
The key is inactive by default, set it to \f[B]active\f[] to immediately
use it to sign \f[I]ZONE\f[].
.RS
.RE
.TP
.B create\-bind\-db \f[I]FILE\f[]
Create DNSSEC database (sqlite3) at \f[I]FILE\f[] for the BIND backend.
Remember to set \f[C]bind\-dnssec\-db=*FILE*\f[] in your
\f[C]pdns.conf\f[].
.RS
.RE
.TP
.B deactivate\-zone\-key \f[I]ZONE\f[] \f[I]KEY\-ID\f[]
Deactivate a key with id KEY\-ID within a zone called \f[I]ZONE\f[].
.RS
.RE
.TP
.B disable\-dnssec \f[I]ZONE\f[]
Deactivate all keys and unset PRESIGNED in \f[I]ZONE\f[].
.RS
.RE
.TP
.B export\-zone\-dnskey \f[I]ZONE\f[] \f[I]KEY\-ID\f[]
Export to standard output DNSKEY and DS of key with key id
\f[I]KEY\-ID\f[] within zone called \f[I]ZONE\f[].
.RS
.RE
.TP
.B export\-zone\-key \f[I]ZONE\f[] \f[I]KEY\-ID\f[]
Export to standard output full (private) key with key id
\f[I]KEY\-ID\f[] within zone called \f[I]ZONE\f[].
The format used is compatible with BIND and NSD/LDNS.
.RS
.RE
.TP
.B generate\-zone\-key {\f[B]KSK\f[],\f[B]ZSK\f[]} [\f[I]ALGORITHM\f[]] [\f[I]KEYBITS\f[]]
Generate a ZSK or KSK to stdout with specified algorithm and bits and
print it on STDOUT.
If \f[I]ALGORITHM\f[] is not set, RSASHA512 is used.
If \f[I]KEYBITS\f[] is not set, an appropriate keysize is selected for
\f[I]ALGORITHM\f[].
.RS
.RE
.TP
.B import\-zone\-key \f[I]ZONE\f[] \f[I]FILE\f[] {\f[B]KSK\f[],\f[B]ZSK\f[]}
Import from \f[I]FILE\f[] a full (private) key for zone called
\f[I]ZONE\f[].
The format used is compatible with BIND and NSD/LDNS.
\f[B]KSK\f[] or \f[B]ZSK\f[] specifies the flags this key should have on
import.
.RS
.RE
.TP
.B remove\-zone\-key \f[I]ZONE\f[] \f[I]KEY\-ID\f[]
Remove a key with id \f[I]KEY\-ID\f[] from a zone called \f[I]ZONE\f[].
.RS
.RE
.TP
.B set\-nsec3 \f[I]ZONE\f[] \[aq]\f[I]HASH\-ALGORITHM\f[] \f[I]FLAGS\f[] \f[I]ITERATIONS\f[] \f[I]SALT\f[]\[aq] [\f[B]narrow\f[]]
Sets NSEC3 parameters for this zone.
The quoted parameters are 4 values that are used for the the NSEC3PARAM
record and decide how NSEC3 records are created.
The NSEC3 parameters must be quoted on the command line.
\f[I]HASH\-ALGORITHM\f[] must be 1 (SHA\-1). Setting \f[I]FLAGS\f[] to 1
enables NSEC3 opt\-out operation.
Only do this if you know you need it. For \f[I]ITERATIONS\f[], please
consult RFC 5155, section 10.3.
And be aware that a high number might overload validating resolvers. The
\f[I]SALT\f[] is a hexadecimal string encoding the bits for the salt.
Setting \f[B]narrow\f[] will make PowerDNS send out "white lies" about
the next secure record.
Instead of looking it up in the database, it will send out the hash + 1
as the next secure record.
 A sample commandline is: "pdnsutil set\-nsec3 powerdnssec.org \[aq]1 1
1 ab\[aq] narrow". \f[B]WARNING\f[]: If running in RSASHA1 mode
(algorithm 5 or 7), switching from NSEC to NSEC3 will require a DS
update in the parent zone.
.RS
.RE
.TP
.B unset\-nsec3 \f[I]ZONE\f[]
Converts \f[I]ZONE\f[] to NSEC operations.
\f[B]WARNING\f[]: If running in RSASHA1 mode (algorithm 5 or 7),
switching from NSEC to NSEC3 will require a DS update at the parent
zone!
.RS
.RE
.TP
.B set\-publish\-cds \f[I]ZONE\f[] [\f[I]DIGESTALGOS\f[]]
Set \f[I]ZONE\f[] to respond to queries for its CDS records.
the optional argument \f[I]DIGESTALGOS\f[] should be a comma\-separated
list of DS algorithms to use.
By default, this is 1,2 (SHA1 and SHA2\-256).
.RS
.RE
.TP
.B set\-publish\-cdnskey \f[I]ZONE\f[]
Set \f[I]ZONE\f[] to publish CDNSKEY records.
.RS
.RE
.TP
.B unset\-publish\-cds \f[I]ZONE\f[]
Set \f[I]ZONE\f[] to stop responding to queries for its CDS records.
.RS
.RE
.TP
.B unset\-publish\-cdnskey \f[I]ZONE\f[]
Set \f[I]ZONE\f[] to stop publishing CDNSKEY records.
.RS
.RE
.SS TSIG RELATED COMMANDS
.PP
These commands manipulate TSIG key information in the database.
Some commands require an \f[I]ALGORITHM\f[], the following are
available:
.IP \[bu] 2
hmac\-md5
.IP \[bu] 2
hmac\-sha1
.IP \[bu] 2
hmac\-sha224
.IP \[bu] 2
hmac\-sha256
.IP \[bu] 2
hmac\-sha384
.IP \[bu] 2
hmac\-sha512
.TP
.B activate\-tsig\-key \f[I]ZONE\f[] \f[I]NAME\f[] {\f[B]master\f[],\f[B]slave\f[]}
Enable TSIG key \f[I]NAME\f[] for zone \f[I]ZONE\f[].
.RS
.RE
.TP
.B deactivate\-tsig\-key \f[I]ZONE\f[] \f[I]NAME\f[] {\f[B]master\f[],\f[B]slave\f[]}
Disable TSIG key \f[I]NAME\f[] for zone \f[I]ZONE\f[].
.RS
.RE
.TP
.B delete\-tsig\-key \f[I]NAME\f[]
Delete the TSIG key \f[I]NAME\f[].
Warning, this does not deactivate said key.
.RS
.RE
.TP
.B generate\-tsig\-key \f[I]NAME\f[] \f[I]ALGORITHM\f[]
Generate new TSIG key with name \f[I]NAME\f[] and the specified
algorithm.
.RS
.RE
.SS ZONE MANIPULATION COMMANDS
.TP
.B create\-zone \f[I]ZONE\f[]
Create an empty zone named \f[I]ZONE\f[].
.RS
.RE
.TP
.B check\-all\-zones
Check all zones for correctness.
.RS
.RE
.TP
.B check\-zone \f[I]ZONE\f[]
Check zone \f[I]ZONE\f[] for correctness.
.RS
.RE
.TP
.B clear\-zone \f[I]ZONE\f[]
Clear the records in zone \f[I]ZONE\f[], but leave actual domain and
settings unchanged
.RS
.RE
.TP
.B delete\-zone \f[I]ZONE\f[]:
Delete the zone named \f[I]ZONE\f[].
.RS
.RE
.TP
.B edit\-zone \f[I]ZONE\f[]
Opens \f[I]ZONE\f[] in zonefile format (regardless of backend it was
loaded from) in the editor set in the environment variable
\f[B]EDITOR\f[].
if \f[B]EDITOR\f[] is empty, \f[I]pdnsutil\f[] falls back to using
\f[I]editor\f[].
.RS
.RE
.TP
.B get\-meta \f[I]ZONE\f[] [\f[I]ATTRIBUTE\f[]]...
Get zone metadata.
If no \f[I]ATTRIBUTE\f[] given, lists all known.
.RS
.RE
.TP
.B hash\-zone\-record \f[I]ZONE\f[] \f[I]RNAME\f[]
This convenience command hashes the name \f[I]RNAME\f[] according to the
NSEC3 settings of \f[I]ZONE\f[].
Refuses to hash for zones with no NSEC3 settings.
.RS
.RE
.TP
.B list\-keys [\f[I]ZONE\f[]]
List DNSSEC information for all keys or for \f[I]ZONE\f[].
.RS
.RE
.TP
.B list\-all\-zones:
List all zone names.
.RS
.RE
.TP
.B list\-zone \f[I]ZONE\f[]
Show all records for \f[I]ZONE\f[].
.RS
.RE
.TP
.B load\-zone \f[I]ZONE\f[] \f[I]FILE\f[]
Load records for \f[I]ZONE\f[] from \f[I]FILE\f[].
If \f[I]ZONE\f[] already exists, all records are overwritten, this
operation is atomic.
If \f[I]ZONE\f[] doesn\[aq]t exist, it is created.
.RS
.RE
.TP
.B rectify\-zone \f[I]ZONE\f[]
Calculates the \[aq]ordername\[aq] and \[aq]auth\[aq] fields for a zone
called \f[I]ZONE\f[] so they comply with DNSSEC settings.
Can be used to fix up migrated data.
Can always safely be run, it does no harm.
.RS
.RE
.TP
.B secure\-zone \f[I]ZONE\f[]
Configures a zone called \f[I]ZONE\f[] with reasonable DNSSEC settings.
You should manually run \[aq]pdnsutil rectify\-zone\[aq] afterwards.
.RS
.RE
.TP
.B set\-meta \f[I]ZONE\f[] \f[I]ATTRIBUTE\f[] [\f[I]VALUE\f[]]
Set domainmetadata \f[I]ATTRIBUTE\f[] for \f[I]ZONE\f[] to
\f[I]VALUE\f[].
An empty value clears it.
.RS
.RE
.TP
.B set\-presigned \f[I]ZONE\f[]
Switches \f[I]ZONE\f[] to presigned operation, utilizing in\-zone
RRSIGs.
.RS
.RE
.TP
.B show\-zone \f[I]ZONE\f[]
Shows all DNSSEC related settings of a zone called \f[I]ZONE\f[].
.RS
.RE
.TP
.B test\-schema \f[I]ZONE\f[]
Test database schema, this creates the zone \f[I]ZONE\f[]
.RS
.RE
.TP
.B unset\-presigned \f[I]ZONE\f[]
Disables presigned operation for \f[I]ZONE\f[].
.RS
.RE
.SS DEBUGGING TOOLS
.TP
.B backend\-cmd \f[I]BACKEND\f[] \f[I]CMD\f[] [\f[I]CMD..\f[]]
Send a text command to a backend for execution.
GSQL backends will take SQL commands, other backends may take different
things.
Be careful!
.RS
.RE
.SH SEE ALSO
.PP
pdns_server (1), pdns_control (1)
.SH AUTHORS
Matthijs MÃ¶hlmann <matthijs@cacholong.nl>.
